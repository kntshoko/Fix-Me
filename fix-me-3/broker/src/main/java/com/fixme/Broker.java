package com.fixme;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousSocketChannel;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
public class Broker {
	AsynchronousSocketChannel client;
	public  Broker() throws IOException, ExecutionException, InterruptedException {
		client = AsynchronousSocketChannel.open();
		InetSocketAddress hostAddress = new InetSocketAddress("localhost", 4999);
		Future<Void> future = client.connect(hostAddress);
		future.get();


	}

	public String sendMessage(String message) throws ExecutionException, InterruptedException {
		byte[] byteMsg = new String(message).getBytes();
		ByteBuffer buffer = ByteBuffer.wrap(byteMsg);
		Future<Integer> writeResult = client.write(buffer);

		// do some computation

		writeResult.get();
		buffer.flip();
		Future<Integer> readResult = client.read(buffer);

		// do some computation

		readResult.get();
		String echo = new String(buffer.array()).trim();
		buffer.clear();
		return echo;
	}

	public static void main(String[] args) throws IOException, ExecutionException, InterruptedException {
		new Broker();
	}
}*/


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import java.net.Socket;*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.concurrent.ExecutionException;

/**
 * Hello world!
 *
 */
/*
public class Broker  extends Thread{

	private  static  final  String SERVER_IP = "127.0.0.1";
	private  static  final int SERVER_PORT = 5000;
	private BufferedReader input;
	private BufferedReader keyboard;
	private PrintWriter out;
	private Socket socket = null;
	private int r = 0, t = 0;
	public Broker() throws IOException {

		try {
			socket = new Socket(SERVER_IP, SERVER_PORT);
			input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			 keyboard = new BufferedReader(new InputStreamReader(System.in));
			 out = new PrintWriter(socket.getOutputStream(), true);

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

public   void run(){
		String serverResponse = null;
		try {
			while (r == 0){
				//out.println("start");
				/*if (t == 0){

					out.println("start");
					out.println("start");
					out.println("start");
					serverResponse = input.readLine();
					String[] g = serverResponse.split(":");
					if (g[0].equals("id")){
						System.out.println(g[1]);
						t++;
					}
				}
				else{*/
			/*		serverResponse = input.readLine();
					System.out.println(serverResponse);}
			//}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void send(){
		try {

			while (true){
				System.out.println("> ");
				String command = null;

				command = keyboard.readLine();


				if(command.equals("quit")) break;;
				out.println(command);


			}
			r = 1;
			socket.close();
			System.exit(0);} catch (IOException e) {
			e.printStackTrace();
		}

	}
	public static void main(String[] args) throws IOException {
		Broker broke = new Broker();
		broke.start();
		//broke.Send();

	}
}*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


public  class Broker{

	public static void main(String[] args) {
		BrokerConnect broker = new BrokerConnect();
		try {
			broker.connect();
		} catch (ExecutionException e) {
			e.printStackTrace();
		}
	}

}